// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package nsddata

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCa3fdb35DecodeGithubComDKolpakovNsddataNsddata(in *jlexer.Lexer, out *NewsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title_ru":
			out.TitleRu = string(in.String())
		case "body_ru":
			out.BodyRu = string(in.String())
		case "news_theme_id":
			out.NewsThemeID = int(in.Int())
		case "group_id":
			out.GroupID = int(in.Int())
		case "pub_date":
			out.PubDate = string(in.String())
		case "news_date":
			out.NewsDate = string(in.String())
		case "content_id_out":
			out.ContentIDOut = string(in.String())
		case "action_id":
			out.ActionID = int(in.Int())
		case "announce_ru":
			out.AnnounceRu = string(in.String())
		case "for_qu_investor":
			out.ForQuInvestor = string(in.String())
		case "ca_type":
			out.CaType = string(in.String())
		case "data":
			easyjsonCa3fdb35Decode(in, &out.Data)
		case "category":
			out.Category = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa3fdb35EncodeGithubComDKolpakovNsddataNsddata(out *jwriter.Writer, in NewsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title_ru\":"
		out.RawString(prefix[1:])
		out.String(string(in.TitleRu))
	}
	{
		const prefix string = ",\"body_ru\":"
		out.RawString(prefix)
		out.String(string(in.BodyRu))
	}
	{
		const prefix string = ",\"news_theme_id\":"
		out.RawString(prefix)
		out.Int(int(in.NewsThemeID))
	}
	{
		const prefix string = ",\"group_id\":"
		out.RawString(prefix)
		out.Int(int(in.GroupID))
	}
	{
		const prefix string = ",\"pub_date\":"
		out.RawString(prefix)
		out.String(string(in.PubDate))
	}
	{
		const prefix string = ",\"news_date\":"
		out.RawString(prefix)
		out.String(string(in.NewsDate))
	}
	{
		const prefix string = ",\"content_id_out\":"
		out.RawString(prefix)
		out.String(string(in.ContentIDOut))
	}
	{
		const prefix string = ",\"action_id\":"
		out.RawString(prefix)
		out.Int(int(in.ActionID))
	}
	{
		const prefix string = ",\"announce_ru\":"
		out.RawString(prefix)
		out.String(string(in.AnnounceRu))
	}
	{
		const prefix string = ",\"for_qu_investor\":"
		out.RawString(prefix)
		out.String(string(in.ForQuInvestor))
	}
	{
		const prefix string = ",\"ca_type\":"
		out.RawString(prefix)
		out.String(string(in.CaType))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjsonCa3fdb35Encode(out, in.Data)
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCa3fdb35EncodeGithubComDKolpakovNsddataNsddata(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCa3fdb35EncodeGithubComDKolpakovNsddataNsddata(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCa3fdb35DecodeGithubComDKolpakovNsddataNsddata(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCa3fdb35DecodeGithubComDKolpakovNsddataNsddata(l, v)
}
func easyjsonCa3fdb35Decode(in *jlexer.Lexer, out *struct {
	ID             int `json:"id"`
	CorpActionType struct {
		ID   int    `json:"id"`
		Code string `json:"code"`
		Name string `json:"name"`
	} `json:"corp_action_type"`
	State struct {
		ID   int    `json:"id"`
		Code string `json:"code"`
		Name string `json:"name"`
	} `json:"state"`
	ActionDatePlan string `json:"action_date_plan"`
	ActionDateCalc string `json:"action_date_calc"`
	RecordDateCalc string `json:"record_date_calc"`
	RecordDatePlan string `json:"record_date_plan"`
	RecordTime     string `json:"record_time"`
	PriorityIssue  struct {
		DecisionDate        string `json:"decision_date"`
		LawSection          string `json:"law_section"`
		DateFrom            string `json:"date_from"`
		DateTo              string `json:"date_to"`
		InitiatorExpireDate string `json:"initiator_expire_date"`
		NsdExpireDate       string `json:"nsd_expire_date"`
		ExpireDate          string `json:"expire_date"`
		NsdActualDate       string `json:"nsd_actual_date"`
		Items               []struct {
			Security struct {
				ID        int    `json:"id"`
				Isin      string `json:"isin"`
				CodeNsd   string `json:"code_nsd"`
				NameFull  string `json:"name_full"`
				InstrType struct {
					ID   int    `json:"id"`
					Name string `json:"name"`
				} `json:"instr_type"`
				StateRegNumber string `json:"state_reg_number"`
			} `json:"security"`
			NewSecurity struct {
				ID        int    `json:"id"`
				Isin      string `json:"isin"`
				CodeNsd   string `json:"code_nsd"`
				NameFull  string `json:"name_full"`
				InstrType struct {
					ID   int    `json:"id"`
					Name string `json:"name"`
				} `json:"instr_type"`
				StateRegNumber string `json:"state_reg_number"`
			} `json:"new_security"`
			Price    int `json:"price"`
			Currency struct {
				ID        int    `json:"id"`
				Code      string `json:"code"`
				NameShort string `json:"name_short"`
				NameFull  string `json:"name_full"`
			} `json:"currency"`
		} `json:"items"`
	} `json:"priority_issue"`
	Securities []struct {
		ID        int    `json:"id"`
		Isin      string `json:"isin"`
		CodeNsd   string `json:"code_nsd"`
		NameFull  string `json:"name_full"`
		InstrType struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		} `json:"instr_type"`
		StateRegNumber string `json:"state_reg_number"`
		StateRegDate   string `json:"state_reg_date"`
		Share          struct {
			Category struct {
				ID        int    `json:"id"`
				NameFull  string `json:"name_full"`
				NameShort string `json:"name_short"`
			} `json:"category"`
			FaceValue float64 `json:"face_value"`
			Currency  struct {
				ID        int    `json:"id"`
				Code      string `json:"code"`
				NameShort string `json:"name_short"`
				NameFull  string `json:"name_full"`
			} `json:"currency"`
		} `json:"share"`
		Issuer struct {
			ID          int    `json:"id"`
			CodeNsd     string `json:"code_nsd"`
			NameFull    string `json:"name_full"`
			NameShort   string `json:"name_short"`
			NameFullTr  string `json:"name_full_tr"`
			NameShortTr string `json:"name_short_tr"`
			Inn         string `json:"inn"`
			Ogrn        string `json:"ogrn"`
			LeiCode     string `json:"lei_code"`
			TaxNumber   string `json:"tax_number"`
		} `json:"issuer"`
	} `json:"securities"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "corp_action_type":
			easyjsonCa3fdb35Decode1(in, &out.CorpActionType)
		case "state":
			easyjsonCa3fdb35Decode1(in, &out.State)
		case "action_date_plan":
			out.ActionDatePlan = string(in.String())
		case "action_date_calc":
			out.ActionDateCalc = string(in.String())
		case "record_date_calc":
			out.RecordDateCalc = string(in.String())
		case "record_date_plan":
			out.RecordDatePlan = string(in.String())
		case "record_time":
			out.RecordTime = string(in.String())
		case "priority_issue":
			easyjsonCa3fdb35Decode2(in, &out.PriorityIssue)
		case "securities":
			if in.IsNull() {
				in.Skip()
				out.Securities = nil
			} else {
				in.Delim('[')
				if out.Securities == nil {
					if !in.IsDelim(']') {
						out.Securities = make([]struct {
							ID        int    `json:"id"`
							Isin      string `json:"isin"`
							CodeNsd   string `json:"code_nsd"`
							NameFull  string `json:"name_full"`
							InstrType struct {
								ID   int    `json:"id"`
								Name string `json:"name"`
							} `json:"instr_type"`
							StateRegNumber string `json:"state_reg_number"`
							StateRegDate   string `json:"state_reg_date"`
							Share          struct {
								Category struct {
									ID        int    `json:"id"`
									NameFull  string `json:"name_full"`
									NameShort string `json:"name_short"`
								} `json:"category"`
								FaceValue float64 `json:"face_value"`
								Currency  struct {
									ID        int    `json:"id"`
									Code      string `json:"code"`
									NameShort string `json:"name_short"`
									NameFull  string `json:"name_full"`
								} `json:"currency"`
							} `json:"share"`
							Issuer struct {
								ID          int    `json:"id"`
								CodeNsd     string `json:"code_nsd"`
								NameFull    string `json:"name_full"`
								NameShort   string `json:"name_short"`
								NameFullTr  string `json:"name_full_tr"`
								NameShortTr string `json:"name_short_tr"`
								Inn         string `json:"inn"`
								Ogrn        string `json:"ogrn"`
								LeiCode     string `json:"lei_code"`
								TaxNumber   string `json:"tax_number"`
							} `json:"issuer"`
						}, 0, 1)
					} else {
						out.Securities = []struct {
							ID        int    `json:"id"`
							Isin      string `json:"isin"`
							CodeNsd   string `json:"code_nsd"`
							NameFull  string `json:"name_full"`
							InstrType struct {
								ID   int    `json:"id"`
								Name string `json:"name"`
							} `json:"instr_type"`
							StateRegNumber string `json:"state_reg_number"`
							StateRegDate   string `json:"state_reg_date"`
							Share          struct {
								Category struct {
									ID        int    `json:"id"`
									NameFull  string `json:"name_full"`
									NameShort string `json:"name_short"`
								} `json:"category"`
								FaceValue float64 `json:"face_value"`
								Currency  struct {
									ID        int    `json:"id"`
									Code      string `json:"code"`
									NameShort string `json:"name_short"`
									NameFull  string `json:"name_full"`
								} `json:"currency"`
							} `json:"share"`
							Issuer struct {
								ID          int    `json:"id"`
								CodeNsd     string `json:"code_nsd"`
								NameFull    string `json:"name_full"`
								NameShort   string `json:"name_short"`
								NameFullTr  string `json:"name_full_tr"`
								NameShortTr string `json:"name_short_tr"`
								Inn         string `json:"inn"`
								Ogrn        string `json:"ogrn"`
								LeiCode     string `json:"lei_code"`
								TaxNumber   string `json:"tax_number"`
							} `json:"issuer"`
						}{}
					}
				} else {
					out.Securities = (out.Securities)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						ID        int    `json:"id"`
						Isin      string `json:"isin"`
						CodeNsd   string `json:"code_nsd"`
						NameFull  string `json:"name_full"`
						InstrType struct {
							ID   int    `json:"id"`
							Name string `json:"name"`
						} `json:"instr_type"`
						StateRegNumber string `json:"state_reg_number"`
						StateRegDate   string `json:"state_reg_date"`
						Share          struct {
							Category struct {
								ID        int    `json:"id"`
								NameFull  string `json:"name_full"`
								NameShort string `json:"name_short"`
							} `json:"category"`
							FaceValue float64 `json:"face_value"`
							Currency  struct {
								ID        int    `json:"id"`
								Code      string `json:"code"`
								NameShort string `json:"name_short"`
								NameFull  string `json:"name_full"`
							} `json:"currency"`
						} `json:"share"`
						Issuer struct {
							ID          int    `json:"id"`
							CodeNsd     string `json:"code_nsd"`
							NameFull    string `json:"name_full"`
							NameShort   string `json:"name_short"`
							NameFullTr  string `json:"name_full_tr"`
							NameShortTr string `json:"name_short_tr"`
							Inn         string `json:"inn"`
							Ogrn        string `json:"ogrn"`
							LeiCode     string `json:"lei_code"`
							TaxNumber   string `json:"tax_number"`
						} `json:"issuer"`
					}
					easyjsonCa3fdb35Decode3(in, &v1)
					out.Securities = append(out.Securities, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa3fdb35Encode(out *jwriter.Writer, in struct {
	ID             int `json:"id"`
	CorpActionType struct {
		ID   int    `json:"id"`
		Code string `json:"code"`
		Name string `json:"name"`
	} `json:"corp_action_type"`
	State struct {
		ID   int    `json:"id"`
		Code string `json:"code"`
		Name string `json:"name"`
	} `json:"state"`
	ActionDatePlan string `json:"action_date_plan"`
	ActionDateCalc string `json:"action_date_calc"`
	RecordDateCalc string `json:"record_date_calc"`
	RecordDatePlan string `json:"record_date_plan"`
	RecordTime     string `json:"record_time"`
	PriorityIssue  struct {
		DecisionDate        string `json:"decision_date"`
		LawSection          string `json:"law_section"`
		DateFrom            string `json:"date_from"`
		DateTo              string `json:"date_to"`
		InitiatorExpireDate string `json:"initiator_expire_date"`
		NsdExpireDate       string `json:"nsd_expire_date"`
		ExpireDate          string `json:"expire_date"`
		NsdActualDate       string `json:"nsd_actual_date"`
		Items               []struct {
			Security struct {
				ID        int    `json:"id"`
				Isin      string `json:"isin"`
				CodeNsd   string `json:"code_nsd"`
				NameFull  string `json:"name_full"`
				InstrType struct {
					ID   int    `json:"id"`
					Name string `json:"name"`
				} `json:"instr_type"`
				StateRegNumber string `json:"state_reg_number"`
			} `json:"security"`
			NewSecurity struct {
				ID        int    `json:"id"`
				Isin      string `json:"isin"`
				CodeNsd   string `json:"code_nsd"`
				NameFull  string `json:"name_full"`
				InstrType struct {
					ID   int    `json:"id"`
					Name string `json:"name"`
				} `json:"instr_type"`
				StateRegNumber string `json:"state_reg_number"`
			} `json:"new_security"`
			Price    int `json:"price"`
			Currency struct {
				ID        int    `json:"id"`
				Code      string `json:"code"`
				NameShort string `json:"name_short"`
				NameFull  string `json:"name_full"`
			} `json:"currency"`
		} `json:"items"`
	} `json:"priority_issue"`
	Securities []struct {
		ID        int    `json:"id"`
		Isin      string `json:"isin"`
		CodeNsd   string `json:"code_nsd"`
		NameFull  string `json:"name_full"`
		InstrType struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		} `json:"instr_type"`
		StateRegNumber string `json:"state_reg_number"`
		StateRegDate   string `json:"state_reg_date"`
		Share          struct {
			Category struct {
				ID        int    `json:"id"`
				NameFull  string `json:"name_full"`
				NameShort string `json:"name_short"`
			} `json:"category"`
			FaceValue float64 `json:"face_value"`
			Currency  struct {
				ID        int    `json:"id"`
				Code      string `json:"code"`
				NameShort string `json:"name_short"`
				NameFull  string `json:"name_full"`
			} `json:"currency"`
		} `json:"share"`
		Issuer struct {
			ID          int    `json:"id"`
			CodeNsd     string `json:"code_nsd"`
			NameFull    string `json:"name_full"`
			NameShort   string `json:"name_short"`
			NameFullTr  string `json:"name_full_tr"`
			NameShortTr string `json:"name_short_tr"`
			Inn         string `json:"inn"`
			Ogrn        string `json:"ogrn"`
			LeiCode     string `json:"lei_code"`
			TaxNumber   string `json:"tax_number"`
		} `json:"issuer"`
	} `json:"securities"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"corp_action_type\":"
		out.RawString(prefix)
		easyjsonCa3fdb35Encode1(out, in.CorpActionType)
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		easyjsonCa3fdb35Encode1(out, in.State)
	}
	{
		const prefix string = ",\"action_date_plan\":"
		out.RawString(prefix)
		out.String(string(in.ActionDatePlan))
	}
	{
		const prefix string = ",\"action_date_calc\":"
		out.RawString(prefix)
		out.String(string(in.ActionDateCalc))
	}
	{
		const prefix string = ",\"record_date_calc\":"
		out.RawString(prefix)
		out.String(string(in.RecordDateCalc))
	}
	{
		const prefix string = ",\"record_date_plan\":"
		out.RawString(prefix)
		out.String(string(in.RecordDatePlan))
	}
	{
		const prefix string = ",\"record_time\":"
		out.RawString(prefix)
		out.String(string(in.RecordTime))
	}
	{
		const prefix string = ",\"priority_issue\":"
		out.RawString(prefix)
		easyjsonCa3fdb35Encode2(out, in.PriorityIssue)
	}
	{
		const prefix string = ",\"securities\":"
		out.RawString(prefix)
		if in.Securities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Securities {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonCa3fdb35Encode3(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonCa3fdb35Decode3(in *jlexer.Lexer, out *struct {
	ID        int    `json:"id"`
	Isin      string `json:"isin"`
	CodeNsd   string `json:"code_nsd"`
	NameFull  string `json:"name_full"`
	InstrType struct {
		ID   int    `json:"id"`
		Name string `json:"name"`
	} `json:"instr_type"`
	StateRegNumber string `json:"state_reg_number"`
	StateRegDate   string `json:"state_reg_date"`
	Share          struct {
		Category struct {
			ID        int    `json:"id"`
			NameFull  string `json:"name_full"`
			NameShort string `json:"name_short"`
		} `json:"category"`
		FaceValue float64 `json:"face_value"`
		Currency  struct {
			ID        int    `json:"id"`
			Code      string `json:"code"`
			NameShort string `json:"name_short"`
			NameFull  string `json:"name_full"`
		} `json:"currency"`
	} `json:"share"`
	Issuer struct {
		ID          int    `json:"id"`
		CodeNsd     string `json:"code_nsd"`
		NameFull    string `json:"name_full"`
		NameShort   string `json:"name_short"`
		NameFullTr  string `json:"name_full_tr"`
		NameShortTr string `json:"name_short_tr"`
		Inn         string `json:"inn"`
		Ogrn        string `json:"ogrn"`
		LeiCode     string `json:"lei_code"`
		TaxNumber   string `json:"tax_number"`
	} `json:"issuer"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "isin":
			out.Isin = string(in.String())
		case "code_nsd":
			out.CodeNsd = string(in.String())
		case "name_full":
			out.NameFull = string(in.String())
		case "instr_type":
			easyjsonCa3fdb35Decode4(in, &out.InstrType)
		case "state_reg_number":
			out.StateRegNumber = string(in.String())
		case "state_reg_date":
			out.StateRegDate = string(in.String())
		case "share":
			easyjsonCa3fdb35Decode5(in, &out.Share)
		case "issuer":
			easyjsonCa3fdb35Decode6(in, &out.Issuer)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa3fdb35Encode3(out *jwriter.Writer, in struct {
	ID        int    `json:"id"`
	Isin      string `json:"isin"`
	CodeNsd   string `json:"code_nsd"`
	NameFull  string `json:"name_full"`
	InstrType struct {
		ID   int    `json:"id"`
		Name string `json:"name"`
	} `json:"instr_type"`
	StateRegNumber string `json:"state_reg_number"`
	StateRegDate   string `json:"state_reg_date"`
	Share          struct {
		Category struct {
			ID        int    `json:"id"`
			NameFull  string `json:"name_full"`
			NameShort string `json:"name_short"`
		} `json:"category"`
		FaceValue float64 `json:"face_value"`
		Currency  struct {
			ID        int    `json:"id"`
			Code      string `json:"code"`
			NameShort string `json:"name_short"`
			NameFull  string `json:"name_full"`
		} `json:"currency"`
	} `json:"share"`
	Issuer struct {
		ID          int    `json:"id"`
		CodeNsd     string `json:"code_nsd"`
		NameFull    string `json:"name_full"`
		NameShort   string `json:"name_short"`
		NameFullTr  string `json:"name_full_tr"`
		NameShortTr string `json:"name_short_tr"`
		Inn         string `json:"inn"`
		Ogrn        string `json:"ogrn"`
		LeiCode     string `json:"lei_code"`
		TaxNumber   string `json:"tax_number"`
	} `json:"issuer"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"isin\":"
		out.RawString(prefix)
		out.String(string(in.Isin))
	}
	{
		const prefix string = ",\"code_nsd\":"
		out.RawString(prefix)
		out.String(string(in.CodeNsd))
	}
	{
		const prefix string = ",\"name_full\":"
		out.RawString(prefix)
		out.String(string(in.NameFull))
	}
	{
		const prefix string = ",\"instr_type\":"
		out.RawString(prefix)
		easyjsonCa3fdb35Encode4(out, in.InstrType)
	}
	{
		const prefix string = ",\"state_reg_number\":"
		out.RawString(prefix)
		out.String(string(in.StateRegNumber))
	}
	{
		const prefix string = ",\"state_reg_date\":"
		out.RawString(prefix)
		out.String(string(in.StateRegDate))
	}
	{
		const prefix string = ",\"share\":"
		out.RawString(prefix)
		easyjsonCa3fdb35Encode5(out, in.Share)
	}
	{
		const prefix string = ",\"issuer\":"
		out.RawString(prefix)
		easyjsonCa3fdb35Encode6(out, in.Issuer)
	}
	out.RawByte('}')
}
func easyjsonCa3fdb35Decode6(in *jlexer.Lexer, out *struct {
	ID          int    `json:"id"`
	CodeNsd     string `json:"code_nsd"`
	NameFull    string `json:"name_full"`
	NameShort   string `json:"name_short"`
	NameFullTr  string `json:"name_full_tr"`
	NameShortTr string `json:"name_short_tr"`
	Inn         string `json:"inn"`
	Ogrn        string `json:"ogrn"`
	LeiCode     string `json:"lei_code"`
	TaxNumber   string `json:"tax_number"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "code_nsd":
			out.CodeNsd = string(in.String())
		case "name_full":
			out.NameFull = string(in.String())
		case "name_short":
			out.NameShort = string(in.String())
		case "name_full_tr":
			out.NameFullTr = string(in.String())
		case "name_short_tr":
			out.NameShortTr = string(in.String())
		case "inn":
			out.Inn = string(in.String())
		case "ogrn":
			out.Ogrn = string(in.String())
		case "lei_code":
			out.LeiCode = string(in.String())
		case "tax_number":
			out.TaxNumber = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa3fdb35Encode6(out *jwriter.Writer, in struct {
	ID          int    `json:"id"`
	CodeNsd     string `json:"code_nsd"`
	NameFull    string `json:"name_full"`
	NameShort   string `json:"name_short"`
	NameFullTr  string `json:"name_full_tr"`
	NameShortTr string `json:"name_short_tr"`
	Inn         string `json:"inn"`
	Ogrn        string `json:"ogrn"`
	LeiCode     string `json:"lei_code"`
	TaxNumber   string `json:"tax_number"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"code_nsd\":"
		out.RawString(prefix)
		out.String(string(in.CodeNsd))
	}
	{
		const prefix string = ",\"name_full\":"
		out.RawString(prefix)
		out.String(string(in.NameFull))
	}
	{
		const prefix string = ",\"name_short\":"
		out.RawString(prefix)
		out.String(string(in.NameShort))
	}
	{
		const prefix string = ",\"name_full_tr\":"
		out.RawString(prefix)
		out.String(string(in.NameFullTr))
	}
	{
		const prefix string = ",\"name_short_tr\":"
		out.RawString(prefix)
		out.String(string(in.NameShortTr))
	}
	{
		const prefix string = ",\"inn\":"
		out.RawString(prefix)
		out.String(string(in.Inn))
	}
	{
		const prefix string = ",\"ogrn\":"
		out.RawString(prefix)
		out.String(string(in.Ogrn))
	}
	{
		const prefix string = ",\"lei_code\":"
		out.RawString(prefix)
		out.String(string(in.LeiCode))
	}
	{
		const prefix string = ",\"tax_number\":"
		out.RawString(prefix)
		out.String(string(in.TaxNumber))
	}
	out.RawByte('}')
}
func easyjsonCa3fdb35Decode5(in *jlexer.Lexer, out *struct {
	Category struct {
		ID        int    `json:"id"`
		NameFull  string `json:"name_full"`
		NameShort string `json:"name_short"`
	} `json:"category"`
	FaceValue float64 `json:"face_value"`
	Currency  struct {
		ID        int    `json:"id"`
		Code      string `json:"code"`
		NameShort string `json:"name_short"`
		NameFull  string `json:"name_full"`
	} `json:"currency"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "category":
			easyjsonCa3fdb35Decode7(in, &out.Category)
		case "face_value":
			out.FaceValue = float64(in.Float64())
		case "currency":
			easyjsonCa3fdb35Decode8(in, &out.Currency)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa3fdb35Encode5(out *jwriter.Writer, in struct {
	Category struct {
		ID        int    `json:"id"`
		NameFull  string `json:"name_full"`
		NameShort string `json:"name_short"`
	} `json:"category"`
	FaceValue float64 `json:"face_value"`
	Currency  struct {
		ID        int    `json:"id"`
		Code      string `json:"code"`
		NameShort string `json:"name_short"`
		NameFull  string `json:"name_full"`
	} `json:"currency"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix[1:])
		easyjsonCa3fdb35Encode7(out, in.Category)
	}
	{
		const prefix string = ",\"face_value\":"
		out.RawString(prefix)
		out.Float64(float64(in.FaceValue))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		easyjsonCa3fdb35Encode8(out, in.Currency)
	}
	out.RawByte('}')
}
func easyjsonCa3fdb35Decode8(in *jlexer.Lexer, out *struct {
	ID        int    `json:"id"`
	Code      string `json:"code"`
	NameShort string `json:"name_short"`
	NameFull  string `json:"name_full"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "code":
			out.Code = string(in.String())
		case "name_short":
			out.NameShort = string(in.String())
		case "name_full":
			out.NameFull = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa3fdb35Encode8(out *jwriter.Writer, in struct {
	ID        int    `json:"id"`
	Code      string `json:"code"`
	NameShort string `json:"name_short"`
	NameFull  string `json:"name_full"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"name_short\":"
		out.RawString(prefix)
		out.String(string(in.NameShort))
	}
	{
		const prefix string = ",\"name_full\":"
		out.RawString(prefix)
		out.String(string(in.NameFull))
	}
	out.RawByte('}')
}
func easyjsonCa3fdb35Decode7(in *jlexer.Lexer, out *struct {
	ID        int    `json:"id"`
	NameFull  string `json:"name_full"`
	NameShort string `json:"name_short"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name_full":
			out.NameFull = string(in.String())
		case "name_short":
			out.NameShort = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa3fdb35Encode7(out *jwriter.Writer, in struct {
	ID        int    `json:"id"`
	NameFull  string `json:"name_full"`
	NameShort string `json:"name_short"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name_full\":"
		out.RawString(prefix)
		out.String(string(in.NameFull))
	}
	{
		const prefix string = ",\"name_short\":"
		out.RawString(prefix)
		out.String(string(in.NameShort))
	}
	out.RawByte('}')
}
func easyjsonCa3fdb35Decode4(in *jlexer.Lexer, out *struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa3fdb35Encode4(out *jwriter.Writer, in struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonCa3fdb35Decode2(in *jlexer.Lexer, out *struct {
	DecisionDate        string `json:"decision_date"`
	LawSection          string `json:"law_section"`
	DateFrom            string `json:"date_from"`
	DateTo              string `json:"date_to"`
	InitiatorExpireDate string `json:"initiator_expire_date"`
	NsdExpireDate       string `json:"nsd_expire_date"`
	ExpireDate          string `json:"expire_date"`
	NsdActualDate       string `json:"nsd_actual_date"`
	Items               []struct {
		Security struct {
			ID        int    `json:"id"`
			Isin      string `json:"isin"`
			CodeNsd   string `json:"code_nsd"`
			NameFull  string `json:"name_full"`
			InstrType struct {
				ID   int    `json:"id"`
				Name string `json:"name"`
			} `json:"instr_type"`
			StateRegNumber string `json:"state_reg_number"`
		} `json:"security"`
		NewSecurity struct {
			ID        int    `json:"id"`
			Isin      string `json:"isin"`
			CodeNsd   string `json:"code_nsd"`
			NameFull  string `json:"name_full"`
			InstrType struct {
				ID   int    `json:"id"`
				Name string `json:"name"`
			} `json:"instr_type"`
			StateRegNumber string `json:"state_reg_number"`
		} `json:"new_security"`
		Price    int `json:"price"`
		Currency struct {
			ID        int    `json:"id"`
			Code      string `json:"code"`
			NameShort string `json:"name_short"`
			NameFull  string `json:"name_full"`
		} `json:"currency"`
	} `json:"items"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "decision_date":
			out.DecisionDate = string(in.String())
		case "law_section":
			out.LawSection = string(in.String())
		case "date_from":
			out.DateFrom = string(in.String())
		case "date_to":
			out.DateTo = string(in.String())
		case "initiator_expire_date":
			out.InitiatorExpireDate = string(in.String())
		case "nsd_expire_date":
			out.NsdExpireDate = string(in.String())
		case "expire_date":
			out.ExpireDate = string(in.String())
		case "nsd_actual_date":
			out.NsdActualDate = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]struct {
							Security struct {
								ID        int    `json:"id"`
								Isin      string `json:"isin"`
								CodeNsd   string `json:"code_nsd"`
								NameFull  string `json:"name_full"`
								InstrType struct {
									ID   int    `json:"id"`
									Name string `json:"name"`
								} `json:"instr_type"`
								StateRegNumber string `json:"state_reg_number"`
							} `json:"security"`
							NewSecurity struct {
								ID        int    `json:"id"`
								Isin      string `json:"isin"`
								CodeNsd   string `json:"code_nsd"`
								NameFull  string `json:"name_full"`
								InstrType struct {
									ID   int    `json:"id"`
									Name string `json:"name"`
								} `json:"instr_type"`
								StateRegNumber string `json:"state_reg_number"`
							} `json:"new_security"`
							Price    int `json:"price"`
							Currency struct {
								ID        int    `json:"id"`
								Code      string `json:"code"`
								NameShort string `json:"name_short"`
								NameFull  string `json:"name_full"`
							} `json:"currency"`
						}, 0, 1)
					} else {
						out.Items = []struct {
							Security struct {
								ID        int    `json:"id"`
								Isin      string `json:"isin"`
								CodeNsd   string `json:"code_nsd"`
								NameFull  string `json:"name_full"`
								InstrType struct {
									ID   int    `json:"id"`
									Name string `json:"name"`
								} `json:"instr_type"`
								StateRegNumber string `json:"state_reg_number"`
							} `json:"security"`
							NewSecurity struct {
								ID        int    `json:"id"`
								Isin      string `json:"isin"`
								CodeNsd   string `json:"code_nsd"`
								NameFull  string `json:"name_full"`
								InstrType struct {
									ID   int    `json:"id"`
									Name string `json:"name"`
								} `json:"instr_type"`
								StateRegNumber string `json:"state_reg_number"`
							} `json:"new_security"`
							Price    int `json:"price"`
							Currency struct {
								ID        int    `json:"id"`
								Code      string `json:"code"`
								NameShort string `json:"name_short"`
								NameFull  string `json:"name_full"`
							} `json:"currency"`
						}{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						Security struct {
							ID        int    `json:"id"`
							Isin      string `json:"isin"`
							CodeNsd   string `json:"code_nsd"`
							NameFull  string `json:"name_full"`
							InstrType struct {
								ID   int    `json:"id"`
								Name string `json:"name"`
							} `json:"instr_type"`
							StateRegNumber string `json:"state_reg_number"`
						} `json:"security"`
						NewSecurity struct {
							ID        int    `json:"id"`
							Isin      string `json:"isin"`
							CodeNsd   string `json:"code_nsd"`
							NameFull  string `json:"name_full"`
							InstrType struct {
								ID   int    `json:"id"`
								Name string `json:"name"`
							} `json:"instr_type"`
							StateRegNumber string `json:"state_reg_number"`
						} `json:"new_security"`
						Price    int `json:"price"`
						Currency struct {
							ID        int    `json:"id"`
							Code      string `json:"code"`
							NameShort string `json:"name_short"`
							NameFull  string `json:"name_full"`
						} `json:"currency"`
					}
					easyjsonCa3fdb35Decode9(in, &v4)
					out.Items = append(out.Items, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa3fdb35Encode2(out *jwriter.Writer, in struct {
	DecisionDate        string `json:"decision_date"`
	LawSection          string `json:"law_section"`
	DateFrom            string `json:"date_from"`
	DateTo              string `json:"date_to"`
	InitiatorExpireDate string `json:"initiator_expire_date"`
	NsdExpireDate       string `json:"nsd_expire_date"`
	ExpireDate          string `json:"expire_date"`
	NsdActualDate       string `json:"nsd_actual_date"`
	Items               []struct {
		Security struct {
			ID        int    `json:"id"`
			Isin      string `json:"isin"`
			CodeNsd   string `json:"code_nsd"`
			NameFull  string `json:"name_full"`
			InstrType struct {
				ID   int    `json:"id"`
				Name string `json:"name"`
			} `json:"instr_type"`
			StateRegNumber string `json:"state_reg_number"`
		} `json:"security"`
		NewSecurity struct {
			ID        int    `json:"id"`
			Isin      string `json:"isin"`
			CodeNsd   string `json:"code_nsd"`
			NameFull  string `json:"name_full"`
			InstrType struct {
				ID   int    `json:"id"`
				Name string `json:"name"`
			} `json:"instr_type"`
			StateRegNumber string `json:"state_reg_number"`
		} `json:"new_security"`
		Price    int `json:"price"`
		Currency struct {
			ID        int    `json:"id"`
			Code      string `json:"code"`
			NameShort string `json:"name_short"`
			NameFull  string `json:"name_full"`
		} `json:"currency"`
	} `json:"items"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"decision_date\":"
		out.RawString(prefix[1:])
		out.String(string(in.DecisionDate))
	}
	{
		const prefix string = ",\"law_section\":"
		out.RawString(prefix)
		out.String(string(in.LawSection))
	}
	{
		const prefix string = ",\"date_from\":"
		out.RawString(prefix)
		out.String(string(in.DateFrom))
	}
	{
		const prefix string = ",\"date_to\":"
		out.RawString(prefix)
		out.String(string(in.DateTo))
	}
	{
		const prefix string = ",\"initiator_expire_date\":"
		out.RawString(prefix)
		out.String(string(in.InitiatorExpireDate))
	}
	{
		const prefix string = ",\"nsd_expire_date\":"
		out.RawString(prefix)
		out.String(string(in.NsdExpireDate))
	}
	{
		const prefix string = ",\"expire_date\":"
		out.RawString(prefix)
		out.String(string(in.ExpireDate))
	}
	{
		const prefix string = ",\"nsd_actual_date\":"
		out.RawString(prefix)
		out.String(string(in.NsdActualDate))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Items {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjsonCa3fdb35Encode9(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonCa3fdb35Decode9(in *jlexer.Lexer, out *struct {
	Security struct {
		ID        int    `json:"id"`
		Isin      string `json:"isin"`
		CodeNsd   string `json:"code_nsd"`
		NameFull  string `json:"name_full"`
		InstrType struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		} `json:"instr_type"`
		StateRegNumber string `json:"state_reg_number"`
	} `json:"security"`
	NewSecurity struct {
		ID        int    `json:"id"`
		Isin      string `json:"isin"`
		CodeNsd   string `json:"code_nsd"`
		NameFull  string `json:"name_full"`
		InstrType struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		} `json:"instr_type"`
		StateRegNumber string `json:"state_reg_number"`
	} `json:"new_security"`
	Price    int `json:"price"`
	Currency struct {
		ID        int    `json:"id"`
		Code      string `json:"code"`
		NameShort string `json:"name_short"`
		NameFull  string `json:"name_full"`
	} `json:"currency"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "security":
			easyjsonCa3fdb35Decode10(in, &out.Security)
		case "new_security":
			easyjsonCa3fdb35Decode10(in, &out.NewSecurity)
		case "price":
			out.Price = int(in.Int())
		case "currency":
			easyjsonCa3fdb35Decode8(in, &out.Currency)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa3fdb35Encode9(out *jwriter.Writer, in struct {
	Security struct {
		ID        int    `json:"id"`
		Isin      string `json:"isin"`
		CodeNsd   string `json:"code_nsd"`
		NameFull  string `json:"name_full"`
		InstrType struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		} `json:"instr_type"`
		StateRegNumber string `json:"state_reg_number"`
	} `json:"security"`
	NewSecurity struct {
		ID        int    `json:"id"`
		Isin      string `json:"isin"`
		CodeNsd   string `json:"code_nsd"`
		NameFull  string `json:"name_full"`
		InstrType struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		} `json:"instr_type"`
		StateRegNumber string `json:"state_reg_number"`
	} `json:"new_security"`
	Price    int `json:"price"`
	Currency struct {
		ID        int    `json:"id"`
		Code      string `json:"code"`
		NameShort string `json:"name_short"`
		NameFull  string `json:"name_full"`
	} `json:"currency"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"security\":"
		out.RawString(prefix[1:])
		easyjsonCa3fdb35Encode10(out, in.Security)
	}
	{
		const prefix string = ",\"new_security\":"
		out.RawString(prefix)
		easyjsonCa3fdb35Encode10(out, in.NewSecurity)
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int(int(in.Price))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		easyjsonCa3fdb35Encode8(out, in.Currency)
	}
	out.RawByte('}')
}
func easyjsonCa3fdb35Decode10(in *jlexer.Lexer, out *struct {
	ID        int    `json:"id"`
	Isin      string `json:"isin"`
	CodeNsd   string `json:"code_nsd"`
	NameFull  string `json:"name_full"`
	InstrType struct {
		ID   int    `json:"id"`
		Name string `json:"name"`
	} `json:"instr_type"`
	StateRegNumber string `json:"state_reg_number"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "isin":
			out.Isin = string(in.String())
		case "code_nsd":
			out.CodeNsd = string(in.String())
		case "name_full":
			out.NameFull = string(in.String())
		case "instr_type":
			easyjsonCa3fdb35Decode4(in, &out.InstrType)
		case "state_reg_number":
			out.StateRegNumber = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa3fdb35Encode10(out *jwriter.Writer, in struct {
	ID        int    `json:"id"`
	Isin      string `json:"isin"`
	CodeNsd   string `json:"code_nsd"`
	NameFull  string `json:"name_full"`
	InstrType struct {
		ID   int    `json:"id"`
		Name string `json:"name"`
	} `json:"instr_type"`
	StateRegNumber string `json:"state_reg_number"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"isin\":"
		out.RawString(prefix)
		out.String(string(in.Isin))
	}
	{
		const prefix string = ",\"code_nsd\":"
		out.RawString(prefix)
		out.String(string(in.CodeNsd))
	}
	{
		const prefix string = ",\"name_full\":"
		out.RawString(prefix)
		out.String(string(in.NameFull))
	}
	{
		const prefix string = ",\"instr_type\":"
		out.RawString(prefix)
		easyjsonCa3fdb35Encode4(out, in.InstrType)
	}
	{
		const prefix string = ",\"state_reg_number\":"
		out.RawString(prefix)
		out.String(string(in.StateRegNumber))
	}
	out.RawByte('}')
}
func easyjsonCa3fdb35Decode1(in *jlexer.Lexer, out *struct {
	ID   int    `json:"id"`
	Code string `json:"code"`
	Name string `json:"name"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "code":
			out.Code = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa3fdb35Encode1(out *jwriter.Writer, in struct {
	ID   int    `json:"id"`
	Code string `json:"code"`
	Name string `json:"name"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
